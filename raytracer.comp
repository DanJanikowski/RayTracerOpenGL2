#version 460 core

#define MAX_OBJECT_COUNT 16

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Data transfered from parent application
layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform float time;

uniform vec3 cameraPos;
uniform vec3 cameraDir;

uniform int numAccumFrames;

uniform vec3 ray00;
uniform vec3 ray10;
uniform vec3 ray01;
uniform vec3 ray11;


struct Material {
	vec4 data;
	vec4 diffuseColor;
	vec4 specularColor;
	vec4 emissionColor;
};

struct Sphere {
	vec4 posRad;
	Material material;
};

struct Plane {
	vec4 c00;
	vec4 c10;
	vec4 c01;
	vec4 c11;
	Material material;
};

layout(std140, binding = 1) uniform SphereBuffer {
	Sphere spheres[MAX_OBJECT_COUNT];
};

layout(std140, binding = 2) uniform PlaneBuffer {
	Plane planes[MAX_OBJECT_COUNT];
};



const vec3 lightPos = vec3(-10, 20, 15);
const vec4 lightColor = vec4(1, 1, 1, 1);
const float lightPower = 800.0;


// Local structs
struct Ray {
	vec3 pos;
	vec3 dir;
};

struct Hit {
	float t;
	vec3 normal;
	Material material;
};

// Function to test float equality
bool isEqual(float x, float y) {
	return (abs(x - y) < 0.0000001);
}

bool intersectSphere(Sphere sphere, Ray ray, inout Hit hit) {
	vec3 pos = sphere.posRad.xyz;
	float rad = sphere.posRad.w;
	
	float a = dot(ray.dir, ray.dir);
	vec3 sToR = ray.pos - pos;
	float b = 2.0 * dot(sToR, ray.dir);
	float c = dot(sToR, sToR) - rad * rad;
	float disc = b * b - 4.0 * a * c;
	if (disc <= 0) return false;
	float t = (-b - sqrt(disc)) / (2.0 * a);
	if (t <= 0) return false;
	if (t < hit.t) {
		hit.t = t;
		hit.normal = normalize((ray.pos + t * ray.dir) - pos);
		hit.material = sphere.material;
		return true;
	}


	// If this t <= 0 then we are inside the sphere OR facing backwards
	//if (t <= 0) {
	//	t = (-b + sqrt(disc)) / (2.0 * a);
	//	// If this t <= 0 then we are backwards
	//	if (t <= 0) return false;
	//	// If not then return the negative normal for the inside face of the sphere
	//	if (t < hit.t) {
	//		hit.t = t;
	//		hit.normal = -normalize((ray.pos + t * ray.dir) - pos);
	//		hit.material = sphere.material;
	//		return true;
	//	}
	//}
	//if (t < hit.t) {
	//	hit.t = t;
	//	hit.normal = normalize((ray.pos + t * ray.dir) - pos);
	//	hit.material = sphere.material;
	//	return true;
	//}
	return true;
}

// Subroutine for plane intersection
bool intersectTriangle(vec3 p0, vec3 p1, vec3 p2, Ray ray, inout Hit hit) {
	vec3 edge1 = p1 - p0;
	vec3 edge2 = p2 - p0;
	vec3 h = cross(ray.dir, edge2);
	float a = dot(edge1, h);
	if (isEqual(a, 0)) return false; // Check if ray is parallel
	float f = 1.0 / a;
	vec3 s = ray.pos - p0;
	float u = f * dot(s, h);
	if (u < 0 || u > 1.0) return false;
	vec3 q = cross(s, edge1);
	float v = f * dot(ray.dir, q);
	if (v < 0.0 || u + v > 1.0) return false;
	float t = f * dot(edge2, q);
	if (t > 0 && t < hit.t) {
		hit.t = t;
		hit.normal = normalize(cross(edge2, edge1));
		if (dot(ray.dir, hit.normal) > 0) hit.normal *= -1;
		return true;
	}
	return false;
}

bool intersectPlane(Plane plane, Ray ray, inout Hit hit) {
	bool intersect = intersectTriangle(plane.c00.xyz, plane.c10.xyz, plane.c11.xyz, ray, hit);
	if (intersect) {
		hit.material = plane.material;
		return true;
	}
	intersect = intersectTriangle(plane.c00.xyz, plane.c11.xyz, plane.c01.xyz, ray, hit);
	if (intersect) {
		hit.material = plane.material;
		return true;
	}
	return false;
}

bool castRay(in Ray ray, inout Hit hit) {
	bool intersect = false;

	// First spheres
	for (int i = 0; i < MAX_OBJECT_COUNT; i++) {
		intersect = intersectSphere(spheres[i], ray, hit) || intersect;
	}
	
	//// Planes
	for (int i = 0; i < 1; i++) {
		intersect = intersectPlane(planes[i], ray, hit) || intersect;
	}

	return intersect;
}

// Traces a singular ray and returns the hit color
vec4 traceRay(in Ray ray) {
	vec4 color = vec4(0);
	vec4 ambientColor = vec4(0.03, 0.9, 0.98, 1.0);

	Hit lastHit;

	for (uint bounce = 0; bounce < 3; bounce++) {
		Hit hit;
		hit.t = 1.0 / 0.0;

		// Blinn Phong Shading
		if (castRay(ray, hit)) {
			vec3 hitPoint = ray.pos + hit.t * ray.dir;
			vec3 e = -ray.dir;
			vec3 l = lightPos - hitPoint;
			float distance = length(l);
			l = normalize(l);
			
			float lambertian = max(dot(hit.normal, l), 0.0);
			
			// Blinn Phong reflectance
			vec3 halfDir = normalize(l + e);
			float specAngle = max(dot(halfDir, hit.normal), 0.0);
			float specularity = pow(specAngle, hit.material.data.z);
			
			if (bounce == 0) {
				color += (hit.material.diffuseColor * lambertian + (hit.material.specularColor) * specularity) * 
								lightColor * lightPower / (distance * distance);
			}
			else {
				color += lastHit.material.specularColor * (hit.material.diffuseColor * lambertian + (hit.material.specularColor) * specularity) * 
								lightColor * lightPower / (distance * distance);
			}
			
			lastHit = hit;
			ray.dir = reflect(ray.dir, hit.normal);
			ray.pos = hitPoint + ray.dir * 0.00001;
		}
		else {
			color += ambientColor;
			break;
		}
	}

	return color;
}

float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

vec3 randVec(vec3 vec){
	return vec3(random(vec2(time, vec.x)), random(vec2(time, vec.y)), random(vec2(time, vec.z)));
}

// Creates the start ray through the current pixel
Ray getStartRay(ivec2 txlCoords, ivec2 imDim) {
	Ray ray;
	ray.pos = cameraPos;
	
	vec2 tpos = vec2(txlCoords) / vec2(imDim.x, imDim.y);
	vec3 rayDir = mix(mix(ray00, ray01, tpos.y), mix(ray10, ray11, tpos.y), tpos.x);
	ray.dir = normalize(rayDir - cameraPos);
	
	return ray;
}
Ray getJitteredStartRay(ivec2 txlCoords, ivec2 imDim, vec3 randOffset) {
	Ray ray;
	ray.pos = cameraPos;
	
	vec2 tpos = vec2(txlCoords) / vec2(imDim.x, imDim.y);
	vec3 rayDir = mix(mix(ray00, ray01, tpos.y), mix(ray10, ray11, tpos.y), tpos.x);
	ray.dir = normalize(rayDir - cameraPos) + 0.002 * randVec(rayDir + randOffset);
	
	return ray;
}

void main() {	
	ivec2 imDim = imageSize(imgOutput);

	ivec2 numGroups = ivec2(ceil(vec2(imDim) / vec2(gl_NumWorkGroups.xy)));
	
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 curCoord;

	Ray ray;
	vec4 pixelColor = vec4(0);
	// If the workgroup block is not the same size as the image dimension
	//	tile the current working core as many times as necessary to fill the image
	for (int yi = 0; yi < numGroups.y; yi++) {
		for (int xi = 0; xi < numGroups.x; xi++) {
			curCoord = texelCoord + ivec2(xi, yi) * ivec2(gl_NumWorkGroups.xy);
	
			//ray = getStartRay(curCoord, imDim);
			//imageStore(imgOutput, curCoord, traceRay(ray));

			ray = getJitteredStartRay(curCoord, imDim, imageLoad(imgOutput, curCoord).xyz);
			if (numAccumFrames == 1) {
				pixelColor = traceRay(ray);
			}
			else {
				pixelColor = ((imageLoad(imgOutput, curCoord) * (numAccumFrames - 1)) + traceRay(ray)) / numAccumFrames;
			}
			imageStore(imgOutput, curCoord, pixelColor);
		}
	}
}