#version 460 core

#extension GL_ARB_compute_shader: enable

#define MAX_OBJECT_COUNT 6
#define MAX_LIGHTS 4

#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)
#define EPSILON 0.0001
#define PI 3.1415926538

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


// Data transfered from parent application
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(rgba32f, binding = 1) uniform image2D skybox;

uniform float time;

uniform vec3 cameraPos;
uniform vec3 cameraDir;
uniform int randMode;

uniform int numAccumFrames;

uniform vec3 ray00;
uniform vec3 ray10;
uniform vec3 ray01;
uniform vec3 ray11;


struct Material {
	// data.x - roughness = how distrubed the reflectance rays are/percentage chance to reflect/absorb
	// data.y - shininess = blinn phong exponent
	// data.z - index of refraction
	// data.w - lightPower = if the material type is a light defines the lights power otherwise 0
	vec4 data;
	vec3 diffuseColor;
	vec3 glossColor;
	vec3 refractionColor;
	vec3 emissionColor;
};

struct PointLight {
	vec4 pos;
	Material material;
};

struct Sphere {
	vec4 posRad;
	Material material;
};

struct Quad {
	vec4 c00;
	vec4 c10;
	vec4 c01;
	vec4 c11;
	Material material;
};

layout(std140, binding = 5) uniform PointLightBuffer {
	PointLight lights[MAX_LIGHTS];
};

layout(std140, binding = 6) uniform SphereBuffer {
	Sphere spheres[16];
};

layout(std140, binding = 7) uniform QuadBuffer {
	Quad quadslist[1];
};


// Local structs
struct Ray {
	vec3 pos;
	vec3 dir;
};

struct Hit {
	float t;
	vec3 normal;
	Material material;
	bool backface;
};


// Util functions

// Function to test float equality
bool isEqual(float x, float y) {
	return (abs(x - y) < EPSILON);
}


// Random funcs 1
float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

vec3 randVec3_2(float seed) {
    float h1 = random(vec2(seed, seed));
    float h2 = random(vec2(h1, seed));
    float h3 = random(vec2(h2, seed));
    return normalize(tan(vec3(h1,h2,h3)));
}

vec3 randomHemisphereVec_2(vec3 normal, float seed) {
	vec3 dir = randVec3_2(seed);
	dir *= sign(dot(dir, normal));
	return normalize(dir);
}


// Random funcs 2
float hash(float a, float b) {
    int x = FK(a); int y = FK(b);
    return float((x*x+y)*(y*y-x)+x)/2.14e9;
}

vec3 randVec3(float seed) {
    float h1 = hash(seed, seed);
    float h2 = hash(h1, seed);
    float h3 = hash(h2, seed);
    return normalize(tan(vec3(h1,h2,h3)));
}

vec3 randomHemisphereVec(vec3 normal, float seed) {
	vec3 dir = randVec3(seed);
	dir *= sign(dot(dir, normal));
	return normalize(dir);
}


mat3x3 getTangentSpace(vec3 normal) {
    // Choose a helper vector for the cross product
    vec3 helper = vec3(1, 0, 0);
    if (abs(normal.x) > 0.99)
        helper = vec3(0, 0, 1);

    // Generate vectors
    vec3 tangent = normalize(cross(normal, helper));
    vec3 binormal = normalize(cross(normal, tangent));
    return mat3x3(tangent, binormal, normal);
}

vec3 sampleHemisphere(vec3 normal, float alpha, vec2 seed) {
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(random(seed), 1.0 / (alpha + 1.0));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float phi = 2 * PI * random(seed.yx);
    vec3 tangentSpaceDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to world space
    return getTangentSpace(normal) * tangentSpaceDir;
}

vec3 sampleSkybox(vec3 dir) {
	//return min(vec3(10.0), 1.0*pow(texture(skybox, vec2(0.5 + atan(dir.x, dir.z)/(2*PI), 0.5 + asin(-dir.y)/PI)).xyz, vec3(1.0/2.2)));
	ivec2 skyDim = imageSize(skybox);
	return min(vec3(10.0), 1.0*pow(imageLoad(skybox, 
				ivec2(vec2(skyDim) * vec2(0.5 + atan(dir.x, dir.z)/(2*PI), 0.5 + asin(-dir.y)/PI))).xyz, 
				vec3(1.0/2.2)));
}




bool intersectSphere(Sphere sphere, Ray ray, inout Hit hit, bool hitBackface) {
	vec3 pos = sphere.posRad.xyz;
	float rad = sphere.posRad.w;
	
	float a = dot(ray.dir, ray.dir);
	vec3 sToR = ray.pos - pos;
	float b = 2.0 * dot(sToR, ray.dir);
	float c = dot(sToR, sToR) - rad * rad;
	float disc = b * b - 4.0 * a * c;
	if (disc <= 0) return false;
	float t = (-b - sqrt(disc)) / (2.0 * a);

	//if (t <= 0) return false;	
	//if (t < hit.t) {
	//	hit.t = t;
	//	hit.normal = normalize((ray.pos + t * ray.dir) - pos);
	//	hit.material = sphere.material;
	//	hit.backface = false;
	//	return true;
	//}

	if (t <= 0) {
		if (!hitBackface) return false;
		t = (-b + sqrt(disc)) / (2.0 * a);
		// If this t <= 0 then we are backwards
		if (t <= 0) return false;
		// If not then return the negative normal for the inside face of the sphere
		if (t < hit.t) {
			hit.t = t;
			hit.normal = -normalize((ray.pos + t * ray.dir) - pos);
			hit.material = sphere.material;
			hit.backface = true;
			return true;
		}
	}
	if (t < hit.t) {
		hit.t = t;
		hit.normal = normalize((ray.pos + t * ray.dir) - pos);
		hit.material = sphere.material;
		hit.backface = false;
		return true;
	}
	return true;
}

// Subroutine for plane intersection
bool intersectTriangle(vec3 p0, vec3 p1, vec3 p2, Material mat, Ray ray, inout Hit hit, bool hitBackface) {
	vec3 edge1 = p1 - p0;
	vec3 edge2 = p2 - p0;
	vec3 h = cross(ray.dir, edge2);
	float a = dot(edge1, h);
	if (isEqual(a, 0)) return false; // Check if ray is parallel
	float f = 1.0 / a;
	vec3 s = ray.pos - p0;
	float u = f * dot(s, h);
	if (u < 0 || u > 1.0) return false;
	vec3 q = cross(s, edge1);
	float v = f * dot(ray.dir, q);
	if (v < 0.0 || u + v > 1.0) return false;
	float t = f * dot(edge2, q);
	if (t > 0 && t < hit.t) {
		vec3 normal = normalize(cross(edge2, edge1));
		if (dot(ray.dir, normal) > 0) {
			if (!hitBackface) return false;
			hit.t = t;
			hit.normal = -normal;
			hit.material = mat;
			hit.backface = true;
		}
		else {
			hit.t = t;
			hit.normal = normal;
			hit.material = mat;
			hit.backface = false;
		}
		return true;
	}
	return false;
}

bool intersectQuad(Quad quad, Ray ray, inout Hit hit, bool hitBackface) {
	bool intersect1 = intersectTriangle(quad.c00.xyz, quad.c10.xyz, quad.c11.xyz, quad.material, ray, hit, hitBackface);
	bool intersect2 = intersectTriangle(quad.c00.xyz, quad.c11.xyz, quad.c01.xyz, quad.material, ray, hit, hitBackface);
	return intersect1 || intersect2;
}

bool intersectObjects(in Ray ray, inout Hit hit, bool hitBackface) {
	bool intersect = false;

	// First spheres
	for (int i = 0; i < spheres.length(); i++) {
		intersect = intersectSphere(spheres[i], ray, hit, hitBackface) || intersect;
	}
	
	// Planes
	//for (int i = 0; i < quadslist.length(); i++) {
	//	intersect = intersectQuad(quadslist[i], ray, hit, hitBackface) || intersect;
	//}

	return intersect;
}

float computeFresnelRatio(float cosi, float n1, float n2) {
	if (isEqual(n1, 0) || isEqual(n2, 0)) return 1.0;
	float ratio;
	// Compute sini using Snell's law
	float sint = n1 / n2 * sqrt(max(0.0, 1.0 - cosi * cosi));
	// Total internal reflection
	if (sint >= 1) return 1.0;
	else {
		float cost = sqrt(max(0.0, 1.0 - sint * sint));
		cosi = abs(cosi);
		float Rs = ((n2 * cosi) - (n1 * cost)) / ((n2 * cosi) + (n1 * cost));
		float Rp = ((n1 * cosi) - (n2 * cost)) / ((n1 * cosi) + (n2 * cost));
		return (Rs * Rs + Rp * Rp) / 2.0;
	}
}

// Traces a singular ray and returns the hit color
vec3 traceRay(in Ray ray, float rngSeed) {
	// Following this lighting model
	//	I = Ka * Ia
	//	+ Kd * [sum for each light: (N . L) * Id * Il]
	//	+ Ks * [sum for each light: ((R . V) ^ Ps) * Fl * Il]
	//	+ Ks * Fr * Ir
	//	+ Kt * (1 - Ks) * Ft * It
	//
	//	I := surface point's color
	//	V := ray direction
	//	P := surface point
	//	N := surface normal
	//	L := light's position - P
	//	R := L - 2 * (N . L) * P
	//	
	//	Ka := surface material's ambient coefficient
	//	Kd := surface material's diffuse coefficient
	//	Ks := surface material's specular coefficient
	//	Ps := surface material's shininess
	//	Kt := surface material's transmission coefficient
	//	
	//	Ia := ambient light color
	//	Il := light's color
	//	Id := diffuse color (****** I ADDED THIS *****)
	//	Ir := reflected ray's color
	//	It := transmitted ray's color
	//	
	//	Fl := light's Fresnel coefficient
	//	Fr := reflected Fresnel coefficient
	//	Ft := transmitted Fresnel coefficient

	vec3 incomingLight = vec3(0);
	vec3 rayColor = vec3(1);
	
	const uint MAX_BOUNCES = 8;
	for (uint bounce = 0; bounce <= MAX_BOUNCES; bounce++) {
		Hit hit;
		hit.t = 1.0 / 0.0;
	
		if (intersectObjects(ray, hit, true)) {
			vec3 hitPoint = ray.pos + hit.t * ray.dir;

			// NEW INTUITION FROM SEBASTIAN LAGUE
			// So the smoothness/roughness value we can just interpolate between which is greaterThan
			// Now this just defines how reflective the ACTUAL surface is
			//
			// HOWEVER 'specularColor' is misleading
			// this term refers to the GLOSS of an object such as a fruit covered in wax
			// or a wooden table covered in varnish
			// 
			// SO then we can simply have a threshold-random value compare
			// this decides if we bounce off the gloss
			// we can also lerp between the materials color and the gloss color with this value


			vec3 diffuseDir = randomHemisphereVec(hit.normal, rngSeed + hit.t / PI);
			vec3 specularDir = reflect(ray.dir, hit.normal);

			float n1, n2;
			if (hit.backface) {
				n1 = hit.material.data.z;
				n2 = 1.0;
			}
			else {
				n1 = 1.0;
				n2 = hit.material.data.z;
			}
			float fresRatio = computeFresnelRatio(dot(ray.dir, hit.normal), n1, n2);
			vec3 refractDir = refract(ray.dir, hit.normal, n1 / n2);

			bool didTransmit = fract(hash(rngSeed + hit.t / PI, rngSeed + ray.dir.x)) > fresRatio;
			
			ray.dir = mix(mix(diffuseDir, specularDir, hit.material.data.x), refractDir, int(didTransmit));
			ray.pos = hitPoint + ray.dir * EPSILON;

			if (didTransmit) {
				rayColor *= hit.material.refractionColor * (1.0 - fresRatio);
			}
			else {			
				vec3 emittedLight = hit.material.emissionColor * hit.material.data.w;
				incomingLight += emittedLight * rayColor;
				rayColor *= hit.material.diffuseColor * dot(ray.dir, hit.normal) * fresRatio;
			}
		}
		else {
			incomingLight += rayColor * sampleSkybox(ray.dir);
			//incomingLight += rayColor * vec3(0.3, 0.3, 0.35);
			break;
		}
	}
	
	return incomingLight;
}

// Creates the start ray through the current pixel
Ray getStartRay(ivec2 txlCoords, ivec2 imDim) {
	Ray ray;
	ray.pos = cameraPos;
	
	vec2 tpos = vec2(txlCoords) / vec2(imDim.x, imDim.y);
	vec3 rayDir = mix(mix(ray00, ray01, tpos.y), mix(ray10, ray11, tpos.y), tpos.x);
	ray.dir = normalize(rayDir - cameraPos);
	
	return ray;
}
Ray getJitteredStartRay(ivec2 txlCoords, ivec2 imDim, float rngSeed) {
	Ray ray;
	ray.pos = cameraPos;
	
	vec2 tpos = vec2(txlCoords) / vec2(imDim.x, imDim.y);
	vec3 rayDir = mix(mix(ray00, ray01, tpos.y), mix(ray10, ray11, tpos.y), tpos.x);
	ray.dir = normalize(normalize(rayDir - cameraPos) + 0.5 * randVec3(rngSeed) / float(imDim.x));
	
	return ray;
}

vec3 renderMethod(Ray ray, ivec2 coord, ivec2 imDim, float rngSeed) {
	vec3 pixelColor = vec3(0);
	// STATIC SINGLE SAMPLE FRAME RENDER
	//float rngSeed = float(curCoord.x + curCoord.y * imDim.y) / float(imDim.x * imDim.y) * PI;
	//ray = getStartRay(curCoord, imDim);
	//imageStore(imgOutput, curCoord, vec4(traceRay(ray, rngSeed), 1));

	// TIME DEPENDENT SINGLE SAMPLE
	//ray = getJitteredStartRay(coord, imDim, rngSeed);
	//if (numAccumFrames == 1) {
	//	pixelColor = traceRay(ray, rngSeed);
	//}
	//else {
	//	pixelColor = ((imageLoad(imgOutput, coord).xyz * (numAccumFrames - 1)) + traceRay(ray, rngSeed)) / numAccumFrames;
	//}

	// TIME DEPENDENT MULTISAMPLE
	vec3 newPixelAvg = vec3(0);
	const int MAX_SAMPLES = 1;
	for (int i = 0; i < MAX_SAMPLES; i++) {
		ray = getJitteredStartRay(coord, imDim, rngSeed + i);
		newPixelAvg += traceRay(ray, rngSeed + i);
	}
	newPixelAvg /= float(MAX_SAMPLES);

	vec3 oldPixel = imageLoad(imgOutput, coord).xyz;

	float weight = 1.0 / (numAccumFrames + 1.0);
	pixelColor = oldPixel * (1.0 - weight) + newPixelAvg * weight;

	return pixelColor;
}

void main() {
	ivec2 imDim = imageSize(imgOutput);
	ivec2 numGroups = ivec2(ceil(vec2(imDim) / vec2(gl_NumWorkGroups.xy)));
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 curCoord;

	Ray ray;
	// If the workgroup block is not the same size as the image dimension
	//	tile the current working core as many times as necessary to fill the image
	for (int yi = 0; yi < numGroups.y; yi++) {
		for (int xi = 0; xi < numGroups.x; xi++) {
			curCoord = texelCoord + ivec2(xi, yi) * ivec2(gl_NumWorkGroups.xy);
	
			float rngSeed;
			rngSeed = noise1(vec2(curCoord) / vec2(imDim) * time);
			//rngSeed = ((curCoord.x + curCoord.y * imDim.y) / (imDim.x * imDim.y) + time);
			vec3 pixelColor = renderMethod(ray, curCoord, imDim, rngSeed);
			imageStore(imgOutput, curCoord, vec4(pixelColor, 1.0));
		}
	}
}